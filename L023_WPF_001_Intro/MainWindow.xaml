<!--Main window XAML-->
        <!-- These are namespaces 
        xmlns - default namespace. Namespace for the most used WPF classes, like window and grid for example.
        xmln + prefix -> that can be used for later in the xaml code.
        "x" = xaml language namespace. Contains the specific things for xaml. Name/Class
        "d" = Designer namespace. Used to work with the designlayout, for example changing the widht and height of design window.
        "mc" = Markup compatibility namespace - can for example make d ignorable as seen in code.
        -->
<Window x:Class="L023_WPF_001_Intro.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:L023_WPF_001_Intro"
        mc:Ignorable="d"
        Title="MainWindow" MinHeight="300" MinWidth="700" Height="450" Width="800" FontSize="40"
        >
        <!-- MinWidth/MaxWidth = Window won't be able to get larger/smaller than these-->
        <!-- d:Width= "300" d:Height= "300" -->
    <Grid>
        <!-- 
             x = namespace from top
             x:Name makes reference to the button so it can be reached from code behind. 
             each element will correspond to a class.
        
             Properties set with Attribute syntax.
        -->
        <Button x:Name="myButton" 
                VerticalAlignment="Center" 
                BorderBrush="#FF707070" 
                Background="#FF43FD43">
            <!-- Properties set with Property element syntax -->
            <Button.Content>
                <!-- Stackpanel, make a stack of elements -->
                <StackPanel Orientation="Vertical">
                    <Label>Code</Label>
                    <Image>
                        <Image.MaxWidth>
                            200
                        </Image.MaxWidth>
                        <Image.Source>
                            https://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/C_Sharp_Logo_2023.svg/640px-C_Sharp_Logo_2023.svg.png
                        </Image.Source>
                    </Image>
                    <Label>C# now</Label>
                </StackPanel>
            </Button.Content>
            <Button.HorizontalAlignment>Left</Button.HorizontalAlignment>
        </Button>

        <StackPanel HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    Margin="0 10 20 40"
                    Background="AliceBlue">
            <Button>kompis</Button>
            <Button Margin="50">kompis</Button>
            <Button>kompis</Button>
        </StackPanel>
        
        <!-- How to work with the grids, * will take up as much space as it can. 100 gives px value. Auto
             will make space for the largest element in that row/column-->
        <Grid Background="AliceBlue">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="2*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="100" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Button Grid.Column="0" 
                    Grid.Row="1" 
                    HorizontalAlignment="Center" 
                    VerticalAlignment="Center" 
                    Content="Hello" 
                    Click="Button_Click_1"/>
            <!-- Click calls Button_click_1 method-->
            <Button x:Name="button1"
                    Grid.Column="2"
                    Grid.Row="2" 
                    HorizontalAlignment="Center" 
                    VerticalAlignment="Center" 
                    Content="Hi" 
                    Click="Button_Click"/>
            
            <!-- Rowspan/Columspan makes the element stretch into multiple columns/Rows -->
            <StackPanel x:Name="myStackPanel" Orientation="Vertical" Grid.Row="0" Grid.ColumnSpan="3" Grid.RowSpan="3">
                <Button Content="A" Margin="10"/>
                <Button Content="B" Margin="10, 0"/>
            </StackPanel>
            <local:MiniGrid Grid.Column="1" Grid.Row="1">
                
            </local:MiniGrid>
        </Grid>

    </Grid>
</Window>

<!-- 
    <Element Attribute></ELement> <= (Closing element) 
    <SelfClosingElement />  
    
    Setting properties
    
    Attribute Syntax:
    <Element Attribute="Value" />
    
    Property element syntax:
    
    <Element>
        <Element.Attribute>Value</Element.Attribute>       
    </Element>
    
    Content syntax Specific property will be set. 
    (Check out [ContentProperty] attribute on the class) if interested.
    
    <Element>
        Value
    </Element>
    
    Collection syntax
    
    <Collection>
        <Collection.Children>
            <Button></Button>
            <Label></Label>
        </Collection.Children>
    </Collection>
    
-->